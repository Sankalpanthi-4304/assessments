# -*- coding: utf-8 -*-
"""final_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ivVRpmQK6-k7uvHBOPr82VaPmcuy1HOa

#1 Load Dataset
"""

import pandas as pd

#load
df = pd.read_excel("/content/Walmart_Dataset Python_Final_Assessment.xlsx")
# df=pd.DataFrame(data)

print("Basic Information about dataset:")
print(df.info())

print("\nFirst five rows of dataset:")
print(df.head())

print("\nNumber of rows and columns:")
print(df.shape)

print("\nColumn names and data types:")
print(df.dtypes)

print("\nNumber of missing values in each column:")
print(df.isnull().sum())

"""#2 Data Cleaning"""

print("\nMissing Values:")
print(df.isnull().sum())

# Handling missing values by dropping them
df.dropna(inplace=True)

print("\nDuplicate Entries:")
print(df.duplicated().sum())

# Drop duplicate entries
df.drop_duplicates(inplace=True)

"""#3 Descriptive Statistics"""

# taking the numerical columns
numerical_columns = df.select_dtypes(include=['int64', 'float64'])

# Calculating mean,median,mode,range,variance,standard deviation
mean_df=numerical_columns.mean()
median_df=numerical_columns.median()
mode_df=numerical_columns.mode().loc[0]
range_df=numerical_columns.max() - numerical_columns.min()
variance_df=numerical_columns.var()
std_df=numerical_columns.std()

res = pd.DataFrame({
    'Mean': mean_df,
    'Median': median_df,
    'Mode': mode_df,
    'Range': range_df,
    'Variance': variance_df,
    'Standard Deviation': std_df
})

print("\nSummary of measures for numerical data:")
print(res)

"""#4 Data Visualization"""

import matplotlib.pyplot as plt
import seaborn as sns

# Line chart order date vs sales
df['Order Date'] = pd.to_datetime(df['Order Date'])
sales_by_date = df.groupby('Order Date')['Sales'].sum().reset_index()

plt.figure(figsize=(10, 8))
plt.plot(sales_by_date['Order Date'], sales_by_date['Sales'], marker='o', linestyle='-')
plt.title('Sales Over Time')
plt.xlabel('Order Date')
plt.ylabel('Sales')
plt.show()

# Scatter plot sales vs profit
plt.figure(figsize=(10, 8))
sns.scatterplot(x='Sales', y='Profit', data=df)
plt.title('Sales vs. Profit')
plt.xlabel('Sales')
plt.ylabel('Profit')
plt.show()

# Box plot sales
plt.figure(figsize=(10, 8))
sns.boxplot(y=df['Sales'])
plt.title('Box plot of Sales')
plt.ylabel('Sales')
plt.show()

# Bar chart sales by category
plt.figure(figsize=(10, 8))
sns.barplot(x='Category', y='Sales', data=df)
plt.title('Sales by Category')
plt.xlabel('Category')
plt.ylabel('Sales')
plt.show()

# Pie chart of Sales distribution by Category
plt.figure(figsize=(8, 8))
sales_by_category = df.groupby('Category')['Sales'].sum()
plt.pie(sales_by_category, labels=sales_by_category.index, autopct='%1.1f%%', startangle=140)
plt.title('Sales distribution by Category')
plt.show()

"""#5 Identifying Relationships"""

# Calculate correlation matrix
correlation_matrix = df.corr()

# Plot correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=.5)
plt.title('Correlation Matrix')
plt.show()

"""#6 Anomaly Detection"""

# using box plot and scatter plot to detect outlier and unusual data points
# Box plot sales
plt.figure(figsize=(10, 6))
sns.boxplot(y=df['Sales'])
plt.title('Box plot of Sales')
plt.ylabel('Sales')
plt.show()

# Scatter plot sales vs. profit
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Sales', y='Profit', data=df)
plt.title('Sales vs. Profit')
plt.xlabel('Sales')
plt.ylabel('Profit')
plt.show()

"""From the above graphs we can see that there are:

2 major outliers in the boxplot

3 major outliers in the scatter plot

#7 Data Discovery

## 1. Trend Analysis
From the below graph we can see that copiers category has made the most growth in terms of sale
"""

df['Year'] = df['Order Date'].dt.year
# Grouping by 'Year' and 'Category' and calculate total sales
sales_by_year_category = df.groupby(['Year', 'Category'])['Sales'].sum().reset_index()

#line chart
plt.figure(figsize=(10, 8))
sns.lineplot(data=sales_by_year_category, x='Year', y='Sales', hue='Category', marker='o')
plt.title('Total Sales by Category Over Time')
plt.xlabel('Year')
plt.ylabel('Total Sales')
plt.legend(title='Category', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

"""## 2. Customer analysis

"""

# Group by customer and calculate the number of orders and total sales for each customer
temp=df.groupby('EmailID').agg({'Order ID': 'nunique', 'Sales': 'sum'}).reset_index()
temp.columns=['Email ID', 'Total Orders', 'Total Sales']

#soring
top_customers_orders=temp.sort_values(by='Total Orders', ascending=False).head(5)
print("Top 5 customers based on number of orders placed:")
print(top_customers_orders)

top_customers_sales=temp.sort_values(by='Total Sales', ascending=False).head(5)
print("\nTop 5 customers based on total sales generated:")
print(top_customers_sales)

"""## 3. Comprehensive analytics

**a. Strategies to optimize the supply chain:**
1. Analyzing sales velocity to understand which products are selling faster and which are selling slower. Adjust the supply levels accordingly to prevent stockouts or overstocking.
2. Analyzing the sales based on the geographical location can also help to mitigate overstocking.

**b. Factors contributing to the geographic distribution of sales:**
1. Analyzing demographic data of different regions to understand customer preferences.
2. Considering factors such as income and employment rates in different regions. We can adjust pricing and providing promotional offers based on the economic conditions of each region.
3. Checking the cultural differences and preferences in different regions. Providing different marketing messages and product features to comply with the local culture can help build up market.

**c. Identifying patterns or predictors of high-value customers:**
1. Segment customers based on recency of transaction, frequency of buy rate, and value of bought items (as done in the 6th question) to identify high-value customers. Target the top customers with personalized marketing, loyalty rewards, and special offers.
2. Analyze purchasing behavior and browsing history to understand preferences and interests. Use this information to enhance the shopping experience.
3. Gather feedback from high-value customers to understand their point of view. Use this feedback to improve products and services and make offerings accordingly to meet their needs.
"""