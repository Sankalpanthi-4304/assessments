# -*- coding: utf-8 -*-
"""LVADSUSR111-SankalpPanthi-IA2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14xOuq2BNvCqLCiAaBia61PIJi9prU_bB
"""

#1
import numpy as np
rgb_image = np.array([[[255, 0, 0], [0, 255, 0], [0, 0, 255]],
                      [[255, 255, 0], [255, 0, 255], [0, 255, 255]],
                      [[127, 127, 127], [200, 200, 200], [50, 50, 50]]])

# Apply the formula to each pixel using matrix multiplication
grayscale_image = np.dot(rgb_image, [0.2989, 0.5870, 0.1140])
grayscale_image=grayscale_image.astype('i')
print("Grayscale image:")
print(grayscale_image)

#2
import numpy as np


data = np.array([[168, 70, 23], [180, 75, 36], [140, 45, 12]])
# Calculate mean and standard deviation for each attribute
means = np.mean(data, axis=0)
print(means)
std = np.std(data, axis=0)
print(std)
# Normalize each attribute to have mean of 0 and standard deviation of 1 using formula normalized datea= (original-mean)/standard deviation
normalized_d = (data - means) / std

print(normalized_d)

#3
import numpy as np
#data of :                 sensor1,                        sensor2,                      sensor3
sensor_data = np.array([[[1, 2, 1], [4, 8, 7]],    [[1, 2, 3], [1, 2, 3]],   [[2, 4, 6], [8, 10, 12]]])

# Flatten the data from sensors
flattened_data=[]
for sensor in sensor_data:
  flattened_data.append(sensor.flatten())

# Reshape the flattened data into a 2D array where each row represents one sensor's data
final_data = np.array(flattened_data)
print(final_data)

#4
import numpy as np
scores = np.array([[10, 15, 20, 18],
                   [8, 12, 10, 15],
                   [9, 12, 11, 15]])

first_scores = scores[:, 0]
# print(first_scores)
last_scores = scores[:, -1]
# print(last_scores)

improvement_percent = (last_scores-first_scores)/first_scores * 100;
print(improvement_percent)

#5
import numpy as np
scores = np.array([[80, 75, 90, 85, -1, -1],
                   [70, 85, 75, 80, 90, -1],
                   [90, 80, -1, -1, -1, -1]])

last3_sub = scores[:, -3:]
# print(last_three_subjects)
exempt = last3_sub != -1
non_exempt = np.where(exempt, last3_sub, 0)
average_s = np.sum(non_exempt, axis=1) / np.sum(exempt, axis=1)
print(average_s)

#6
import numpy as np

def apply_monthly_adjustment(city_temp, monthly_adj):
    adj_temp = city_temp * monthly_adj
    return adj_temp

city_temp = np.array([[20, 23, 23],
                      [18, 23, 27],
                      [25, 29, 32]])
monthly_adj = np.array([1.2, 0.8, 1.3])
adj_temp = apply_monthly_adjustment(city_temp, monthly_adj)
print(adj_temp)

#7
import pandas as pd
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Frank', 'Grace'],
    'Age': [25, 30, 35, 40, 45, 50, 55],
    'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Miami', 'Boston'],
    'Department': ['HR', 'IT', 'Finance', 'Marketing', 'Sales', 'IT', 'HR']
}

df = pd.DataFrame(data)
f_df = df[(df['Age'] < 45) & (df['Department'] != 'HR')]
print(f_df[['Name', 'City']])

#8
import pandas as pd
data = {
    'Product': ['Apples', 'Bananas', 'Cherries', 'Dates', 'Elderberries', 'Flour', 'Grapes'],
    'Category': ['Fruit', 'Fruit', 'Fruit', 'Fruit', 'Fruit', 'Bakery', 'Fruit'],
    'Price': [1.20, 0.50, 3.00, 2.50, 4.00, 1.50, 2.00],
    'Promotion': [True, False, True, True, False, True, False]
}

df = pd.DataFrame(data)
fruit_df = df[(df['Category'] == 'Fruit') & (df['Promotion'] == False)]
avg_price = fruit_df['Price'].mean()
above_avg_df = fruit_df[fruit_df['Price'] > avg_price]
print(above_avg_df)

#9
import pandas as pd
employee_data = {
    'Employee': ['Alice', 'Bob', 'Charlie', 'David'],
    'Department': ['HR', 'IT', 'Finance', 'IT'],
    'Manager': ['John', 'Rachel', 'Emily', 'Rachel']
}
project_data = {
    'Employee': ['Alice', 'Charlie', 'Eve'],
    'Project': ['P1', 'P3', 'P2']
}
employee_df = pd.DataFrame(employee_data)
project_df = pd.DataFrame(project_data)

final_df = pd.merge(project_df, employee_df, on='Employee', how='left')
print(final_df)

#10
import pandas as pd
data = {
    'Department': ['Electronics', 'Electronics', 'Clothing', 'Clothing', 'Home Goods'],
    'Salesperson': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'Sales': [70000, 50000, 30000, 40000, 60000]
}
df = pd.DataFrame(data)
avg_sales_sp = df.groupby('Department')['Sales'].mean()
# print(avg_sales_sp)
final = avg_sales_sp.sort_values(ascending=False)
print(final)